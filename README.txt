Ученические задачи с курса "С++ разработчик" от GeekBrains. Раздел про массивы, лекция 2.
Задача 4_1
С помощью push_back() реализуйте очередь из роботов-андроидов. Роботы приходят 
в очередь и называют(вводят с клавиатуры) свои порядковые номера (целые положительные).
Последний робот в очереди всегда имеет номер -1. 
Когда он пришёл, необходимо вывести на экран все номера в очереди.
РЕАЛИЗОВАЛ с небольшим изменением: когда вводим номер робота -1, программа не ставит его в 
очередь, а просто прерывает процесс ввода номеров.
Задача 4_2,
**Продолжение темы про очередь из роботов-андроидов. Роботы приходят 
в очередь и называют(вводят с клавиатуры) свои порядковые номера (целые положительные).
Робот с большим, чем у последнего в очереди, номером приходит в очередь и заставляет 
уходить из конца очереди всех, чей номер меньше, чем у него, а потом становится в очередь сам. 
Последний робот будет иметь номер -1 (и, соответственно, не сможет никого выгнать, 
так как остальные имеют положительные номера).
Когда он пришёл, нужно вывести все номера в очереди на экран.**
Задача практически такая-же как на разобранная на лекции, только число роботов не ограниченно.
РЕАЛИЗОВАЛ через: два цикла while, вложенных один в другой, 
que.pop_back() - удаление последнего элемента в очереди;
que.push_back(number) - добавление в конец очереди введенного элемента.
Задача 4_3
Роботы приходят в очередь и называют(вводят с клавиатуры) свои порядковые номера (целые
положительные). Комната, в которой роботы-андроиды занимают своё место, имеет ограниченный 
размер (который равен capacity вектора, в который вы их записываете). Когда комната заполняется, 
роботам приходится “переходить” в другую комнату, чуть больше (но вы этого не видите). 
Необходимо отследить, когда в комнате будет оставаться всего 2 свободных места для роботов, 
и вывести сообщение об этом на экран.
Последний робот будет иметь номер -1.
РЕАЛИЗОВАЛ, используя элементы:
que.push_back(number) - добавление в конец очереди введенного элемента;
que.reserve (10) - резервирование емкости под динамический массив que;
que.capacity() - величина зарезирвированной емкости под массив que;
и конечно, que.size() - размер массива que.
que.reserve понадобился потому, что если массив сначала просто объявлен без указания размера, он резервирует под массив место, равное его размеру.
И, соответственно, постоянно выдает предупреждение, что место заканчивается (как по условию задачи).
